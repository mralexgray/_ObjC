

#ifndef _ObjC__ObjC_pch
#define _ObjC__ObjC_pch

//#define XcodePath _system(@"printf \"${$(xcode-select -p)%.app/*}.app\"")
#define        FM        NSFileManager.defaultManager
#define     UDEFS        NSUserDefaults.standardUserDefaults
#define   THEDATE        [NSDateFormatter localizedStringFromDate:NSDate.date dateStyle:NSDateFormatterMediumStyle timeStyle:NSDateFormatterMediumStyle]
#define      args        NSProcessInfo.processInfo.arguments
#define       M(X)       NSMutable##X
#define     LOC(S,LOC)   [S rangeOfString:LOC].location
#define       $(...)     [NSString stringWithFormat:__VA_ARGS__]
#define $APPEND(X,...)   [X appendFormat:__VA_ARGS__]
#define      CR(MSTR)    [MSTR appendString:@"\n"]

#import "RegExCategories.h"

NS_INLINE NSDictionary * ParseArgs () { NSMutableDictionary *opts = @{}.mutableCopy;

  id currentFlag = nil, input = NSProcessInfo.processInfo.arguments;

  for (NSString *argument in [input subarrayWithRange:(NSRange){1,[input count]-1}]) { 

    BOOL argIsFlag = [argument hasPrefix:@"-"];

    NSString *arg = !argIsFlag ? argument : ({ NSString *newFlag = argument.copy;

    while ([newFlag hasPrefix:@"-"]) newFlag = [newFlag substringFromIndex:1]; newFlag; });

    if (currentFlag) { // we HAVE a flag already!

      if (argIsFlag && ![opts objectForKey:currentFlag = arg])

        opts[currentFlag] = NSNull.null; // create new flag capture group.

      else { // doesn't have - prefix ... adding or creating a value.

        id existing = opts[currentFlag];
        opts[currentFlag] = !existing || [existing isKindOfClass: NSNull.class] ? arg
                          :              [existing isKindOfClass:NSArray.class] ? [existing arrayByAddingObject:arg]
                          : @[existing, arg];
      }

    } else { // no current flag. save value.. create new flag capture.

      if (argIsFlag && !opts[currentFlag = arg]) opts[currentFlag] = NSNull.null;

      else { // No '-', add to unnamed array.

        opts[@"?"] = [opts[@"?"] ?: @[] arrayByAddingObject:arg]; currentFlag = nil;
      }
    }
  }
  return opts.copy;
}


NS_INLINE id _sTask(id cmd) { return !cmd ? nil : ({ NSPipe* pipe; NSTask * task;

  [task = NSTask.new setValuesForKeysWithDictionary: @{  @"launchPath" : @"/bin/sh",
                                                          @"arguments" : @[@"-c", cmd],
                                                     @"standardOutput" : pipe = NSPipe.pipe}]; [task launch];
  [NSString.alloc initWithData: pipe.fileHandleForReading.readDataToEndOfFile encoding:NSUTF8StringEncoding]; });
}

NS_INLINE id _uSort(id str) { return _sTask($(@"echo \"%@\"|sort|uniq", str)); }


NS_INLINE NSString * CUTE_HEADER(id str) { M(String)*line = @"".mutableCopy;

/// HELPERS
//////////////

  for (int i = 0; i < [str length] + 6; i++) [line appendString:@"/"];
  return $(@"%@\n// %@ //\n%@\n", line, str, line);
}


@interface NSString  (Subscript) - objectAtIndexedSubscript:(NSInteger)i; @end

#endif
